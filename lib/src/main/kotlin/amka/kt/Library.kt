/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package amka.kt

import java.text.ParseException
import java.text.SimpleDateFormat

class Amka {
    fun isValid(amka: String): Pair<Boolean, String> {
        if (! amka.matches("\\d+".toRegex())) {
            return Pair(false, "Provided AMKA is not a numeric value")
        }

        if (amka.length != 11) {
            return Pair(false, "Provided number is not 11 digits long")
        }

        val datePart = amka.substring(0, 6)
        try {
            val df = SimpleDateFormat("ddMMyy")
            df.isLenient = false
            df.parse(datePart)
        } catch (e: ParseException) {
            return Pair(false, "First 6 digits of the provided AMKA do not represent a valid date")
        }

        // Confirm check-digit validity using Luhn algorithm
        // https://en.wikipedia.org/wiki/Luhn_algorithm
        var iSum = 0;
        for (i: Int in amka.indices) {
            var n = Integer.parseInt(amka.substring(i, i + 1));
            if (i % 2 != 0) {
                n *= 2;
                if (n > 9) {
                    n -= 9;
                }
            }
            iSum += n;
        }

        val validCheckDigit = iSum % 10 == 0;

        if (! validCheckDigit) {
            return Pair(false, "Provided AMKA does not have a valid checkdigit");
        }

        return Pair(true, "")
    }
}
